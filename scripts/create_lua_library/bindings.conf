#Bindings generator config

# global bindings settings
[global]
#target directory containing header files to parse
TargetDirectory = ../../include/polycode/core
#include path prefix used when including the header files from generated headers (i.e. bar for #include "bar/Foo.h")
HeaderIncludeDirectory = polycode/core
#comma separated list of header files without extensions to ignore (i.e. Foo for Foo.h)
IgnoreFiles = PolyTween, PolyTweenManager, PolyGLSLProgram, PolyGLSLShader, PolyGLSLShaderModule, PolyWinCore, PolyIOSCore, PolyRPICore, PolyUWPCore, PolyCocoaCore, PolyAGLCore, PolySDLCore, Poly_iPhone, PolyGLES1Renderer, PolyGLRenderer, tinyxml, tinystr, OpenGLCubemap, PolyiPhoneCore, PolyGLES1Texture, PolyGLTexture, PolyGLVertexBuffer, PolyThreaded, PolyGLHeaders, GLee, PolyPeer, PolySocket, PolyClient, PolyServer, PolyServerWorld, OSFILE, OSFileEntry, OSBasics, PolyLogger, PolyFontGlyphSheet, PolyXAudio2AudioInterface
#comma separated list of non-standard symbols to strip that might affect header parsing (i.e. __declspec(dllexport))
StripSymbols = _PolyExport
#comma separated list of classes to ignore when parsing (i.e. CFoo, CBar)
IgnoreClasses = PAAudioInterface, AudioInterface, ResourceLoader, CoreFile, CoreFileProvider, GraphicsInterface, Script, LuaScript, JSScript, Object, Threaded, OpenGLCubemap, PolyBase, Matrix4::union
#comma separated list of class methods to ignore
IgnoreMethods = readByte32, readByte16, getCustomEntitiesByType, Core, Renderer, Shader, Texture, handleEvent, secondaryHandler, getSTLString, readInt, CoreServices
LibraryName = Polycode

#settings for the lua bindings generator
[lua]
#comma separated list of classes that will not be garbage collected by Lua (Foo, Bar)
DisableGarbageCollection = Entity,SceneLabel, SceneMesh, Scene, Texture, Image, Camera, SceneParticleEmitter, Mesh, Vertex, Polygon, Polycode::Polygon, Material, ScenePrimitive, SceneLine, SceneLight, SceneSound, SceneImage, SceneEntity, SceneEntityInstance, SceneSprite
#template file for the lua wrappers header file
WrapperHeaderTemplate = templates/lua_wrappers.h
#target header file the wrappers will be written to
WrapperHeaderTarget = PolycodeLuaWrappers.h

